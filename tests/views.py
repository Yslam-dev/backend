from rest_framework import generics, permissions
from rest_framework.exceptions import PermissionDenied
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
from rest_framework.exceptions import ValidationError
from .models import Test, Question, TestGive, TestHistory
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
from .serializers import TestCreateSerializer, QuestionSerializer, TestGiveSerializer, TestHistorySerializer
import random

class TestCreateView(generics.CreateAPIView):
    serializer_class = TestCreateSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        if self.request.user.role != 'teacher':
            raise PermissionDenied("Dine mugallymlar test duzup bilyar")
        serializer.save(teacher=self.request.user)


class TestListView(generics.ListAPIView):
    # –¢–µ–ø–µ—Ä—å TestListView –±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –≤–º–µ—Å—Ç–µ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    serializer_class = TestCreateSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.role == 'teacher':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º select_related –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            return Test.objects.filter(teacher=user).prefetch_related('questions').order_by('-create_at')


class TestDeleteUpdateView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Test.objects.all()
    serializer_class = TestCreateSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        obj = super().get_object()
        if self.request.user != obj.teacher:
            raise PermissionDenied("Bu testin duzujisi sen dal!")
        return obj


class TestGivenCreateView(generics.CreateAPIView):
    serializer_class = TestGiveSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        if self.request.user.role != 'teacher':
            raise PermissionDenied("Dine mugallymlar ugradyp bilyar")

        test_instance = serializer.validated_data['test']
        number_given = serializer.validated_data['number_given']
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        all_questions = list(test_instance.questions.all())

        # 2. –í—ã–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
        if number_given >= len(all_questions):
            selected_questions = all_questions
        else:
            selected_questions = random.sample(all_questions, number_given) # üëà –í–æ—Ç –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ!

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç TestGive
        test_give_instance = serializer.save(teacher=self.request.user)
        
        # 4. üü¢ –§–ò–ö–°–ò–†–£–ï–ú –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–æ–≤–æ–º –ø–æ–ª–µ
        test_give_instance.given_questions.set(selected_questions)


from rest_framework import generics, permissions
from .models import TestGive
from .serializers import TestGiveSerializer

class TestGivenListView(generics.ListAPIView):
    serializer_class = TestGiveSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user

        if user.role == 'student':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
            if not hasattr(user, 'group_number') or user.group_number is None:
                return TestGive.objects.none()

            return TestGive.objects.filter(
                given_group=user.group_number
            ).select_related('test', 'teacher').prefetch_related('test__questions')

        elif user.role == 'teacher':
            return TestGive.objects.filter(teacher=user).select_related('test', 'teacher').prefetch_related('test__questions')

        return TestGive.objects.none()


class TestGivenDeleteUpdateView(generics.RetrieveUpdateDestroyAPIView):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å TestGive –ø–æ ID.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è TestGive –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
    """
    queryset = TestGive.objects.all()
    serializer_class = TestGiveSerializer
    permission_classes = [permissions.IsAuthenticated]
class TestHistoryCreateView(generics.CreateAPIView):
    serializer_class = TestHistorySerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ 'user' –≤ TestHistory
        serializer.save(user=self.request.user)

class TestHistoryCreateView(generics.CreateAPIView):
    serializer_class = TestHistorySerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        give_info = serializer.validated_data.get('give_information')
        test_info = serializer.validated_data.get('test_information')
        given_group = None  # üü¢ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ï—Å–ª–∏ –µ—Å—Ç—å give_information ‚Äî –±–µ—Ä—ë–º –≥—Ä—É–ø–ø—É –∏ —Ç–µ—Å—Ç –æ—Ç—Ç—É–¥–∞
        if give_info:
            test_info = give_info.test
            given_group = give_info.given_group

        if not test_info:
            raise ValidationError("Test maglumatlary tapylmady.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë —Å—Ä–∞–∑—É
        serializer.save(
            user=self.request.user,
            test_information=test_info,
            give_information=give_info,
            given_group=given_group
        )

        # –û—Ç–ª–∞–¥–∫–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º)
        print("‚úÖ given_group saved as:", given_group)


class TestHistoryListView(generics.ListAPIView):
    serializer_class = TestHistorySerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        logged_in_user = self.request.user
        
        # 1. –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —É—á–∏—Ç–µ–ª—è
        if logged_in_user.role == 'teacher':
            return TestHistory.objects.filter(test_information__teacher=logged_in_user).order_by("-id")
        
        # 2. –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ okuwcy.jsx)
        elif logged_in_user.role == 'student':
            return TestHistory.objects.filter(user=logged_in_user).order_by("-id")
            
            # üõë –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 500 Internal Server Error: –ó–∞—â–∏—Ç–∞ –æ—Ç ?user=undefined
            if not user_id_from_query or user_id_from_query.lower() == 'undefined':
                return TestHistory.objects.none()

            # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
            if str(logged_in_user.id) != user_id_from_query:
                raise PermissionDenied("Siz dine oz netijelerinizi gorup bilersiniz.")
            
            # üü¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FieldError: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ 'user'
            return TestHistory.objects.filter(user=user_id_from_query).order_by("-id")
        
        # –î–ª—è –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏
        return TestHistory.objects.none()


class TestHistoryDeleteUpdateView(generics.RetrieveUpdateDestroyAPIView):
    queryset = TestHistory.objects.all()
    serializer_class = TestHistorySerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        obj = super().get_object()
        # –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª—è—Ç—å/–æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —Ç–µ—Å—Ç
        if self.request.user != obj.test_information.teacher:
            raise PermissionDenied("Sen bu testin taryhyny uygedip yada pozup bilmersin")
        return obj
