from rest_framework import serializers
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
from .models import Test, Question, TestGive, TestHistory 
from django.contrib.auth import get_user_model

User = get_user_model()

# =================================================================
# 1. –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–†–´ –î–õ–Ø TEST –∏ QUESTION (–û—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# =================================================================

class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Question
        fields = ['question_text', 'correct_answer', 'answers'] 

class TestCreateSerializer(serializers.ModelSerializer):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º TestCreateSerializer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ TestListView (–¥–ª—è –æ—Ç–¥–∞—á–∏ –≤–æ–ø—Ä–æ—Å–æ–≤)
    questions = QuestionSerializer(many=True, required=False)

    class Meta:
        model = Test
        fields = ['id','theme', 'number_question', 'create_at', 'teacher', 'questions'] 
        read_only_fields = ['teacher'] # –ó–∞—â–∏—Ç–∞ –ø–æ–ª—è —É—á–∏—Ç–µ–ª—è
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å depth=1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —É—á–∏—Ç–µ–ª—è
        depth = 1

    def create(self, validated_data):
        questions_data = validated_data.pop('questions', [])
        test = Test.objects.create(**validated_data)
        for question_data in questions_data:
            Question.objects.create(test=test, **question_data)
        return test

# =================================================================
# 2. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô TestGiveSerializer (–î–æ–±–∞–≤–ª–µ–Ω depth=1)
# =================================================================

class TestGiveSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è TestGive.
    - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç test ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.
    - –û—Ç–¥–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Test –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º—ã (test_information).
    """
    
    # Read-only –ø–æ–ª–µ –¥–ª—è –æ—Ç–¥–∞—á–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ (—Ç–µ–º–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç.–¥.)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º TestCreateSerializer, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ —Ç–µ–º—É.
    test_information = TestCreateSerializer(source='test', read_only=True)
    
    # –ü–æ–ª–µ 'test' –¥–ª—è –ø—Ä–∏–µ–º–∞ ID —Ç–µ—Å—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (–∑–∞–ø–∏—Å—å)
    test = serializers.PrimaryKeyRelatedField(
        queryset=Test.objects.all(), 
        write_only=True # –≠—Ç–æ –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å depth=1 –ª–æ–≥–∏–∫—É –ø—Ä–∏ –æ—Ç–¥–∞—á–µ
    )
    
    # –£—á–∏—Ç–µ–ª—å read-only
    teacher = serializers.SlugRelatedField(
        slug_field='username', 
        read_only=True
    )

    class Meta:
        model = TestGive
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —á—Ç–µ–Ω–∏—è (–∫—Ä–æ–º–µ 'test', –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å write-only)
        fields = [
            'id', 'duration_minutes', 'number_given', 'given_group', 
            'teacher', 'test', 'test_information'
        ]
        # –í–∞–∂–Ω–æ: 

# =================================================================
# 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô TestHistorySerializer 
# =================================================================

class TestHistorySerializer(serializers.ModelSerializer):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç TestHistory —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ TestGive –∏ Test.
    TestGive –∏ TestInformation –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏.
    """
    class Meta:
        model = TestHistory
        fields = '__all__'
        read_only_fields = ['user']
        # üü¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º depth=1. 
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 'theme' –≤ –∏—Å—Ç–æ—Ä–∏–∏.
        depth = 1