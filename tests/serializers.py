from rest_framework import serializers
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
from .models import Test, Question, TestGive, TestHistory 
from django.contrib.auth import get_user_model

User = get_user_model()

# =================================================================
# 1. –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–†–´ –î–õ–Ø TEST –∏ QUESTION (–û—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# =================================================================

class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Question
        # –ü–æ–ª–µ answers –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∏–º–æ, —á—Ç–æ–±—ã —Å—Ç—É–¥–µ–Ω—Ç –º–æ–≥ –≤—ã–±–∏—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
        fields = ['id', 'question_text', 'correct_answer', 'answers'] 
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: 'correct_answer' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä—ã—Ç –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏,
        # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∑–¥–µ—Å—å.

class TestCreateSerializer(serializers.ModelSerializer):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º TestCreateSerializer –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ TestListView (–¥–ª—è –æ—Ç–¥–∞—á–∏ –≤–æ–ø—Ä–æ—Å–æ–≤)
    questions = QuestionSerializer(many=True, required=False)

    class Meta:
        model = Test
        fields = ['id','theme', 'number_question', 'create_at', 'teacher', 'questions'] 
        read_only_fields = ['teacher'] # –ó–∞—â–∏—Ç–∞ –ø–æ–ª—è —É—á–∏—Ç–µ–ª—è
        depth = 1 # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —É—á–∏—Ç–µ–ª—è

    def create(self, validated_data):
        questions_data = validated_data.pop('questions', [])
        test = Test.objects.create(**validated_data)
        for question_data in questions_data:
            Question.objects.create(test=test, **question_data)
        return test

# =================================================================
# 2. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô TestGiveSerializer (–¥–ª—è given_questions) üöÄ
# =================================================================

class TestGiveSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è TestGive.
    - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç test ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.
    - –û—Ç–¥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ given_questions.
    """
    
    # ‚ùå –£–î–ê–õ–ï–ù–û: test_information (–∫–æ—Ç–æ—Ä–æ–µ –¥–∞–≤–∞–ª–æ –í–°–ï –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞)
    # test_information = TestCreateSerializer(source='test', read_only=True)
    
    # üü¢ –ù–û–í–û–ï –ü–û–õ–ï: –¢–µ–ø–µ—Ä—å –æ—Ç–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
    given_questions = QuestionSerializer(many=True, read_only=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É (theme) –∏ ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (test_id) –Ω–∞–ø—Ä—è–º—É—é
    # –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, —Ç–∞–∫ –∫–∞–∫ test_information —É–¥–∞–ª–µ–Ω–æ
    test_theme = serializers.CharField(source='test.theme', read_only=True)
    test_id = serializers.IntegerField(source='test.id', read_only=True)
    
    # –ü–æ–ª–µ 'test' –¥–ª—è –ø—Ä–∏–µ–º–∞ ID —Ç–µ—Å—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (–∑–∞–ø–∏—Å—å)
    test = serializers.PrimaryKeyRelatedField(
        queryset=Test.objects.all(), 
        write_only=True 
    )
    
    # –£—á–∏—Ç–µ–ª—å read-only
    teacher = serializers.SlugRelatedField(
        slug_field='username', 
        read_only=True
    )

    class Meta:
        model = TestGive
        # –£–¥–∞–ª—è–µ–º 'test_information' –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        fields = [
            'id', 'duration_minutes', 'number_given', 'given_group', 
            'teacher', 'test', 'test_theme', 'test_id', 'given_questions'
        ]
        # depth –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'surname', 'username']
        # eger User modelinde 'name' we 'surname' √Ωok bolsa, u√Ωgunla≈üdyryp √Ωaz        
# =================================================================
# 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô TestHistorySerializer 
# =================================================================

        
class TestShortSerializer(serializers.ModelSerializer):
    teacher = serializers.SlugRelatedField(slug_field='username', read_only=True)

    class Meta:
        model = Test
        fields = ['id', 'theme', 'number_question', 'create_at', 'teacher']


class TestHistorySerializer(serializers.ModelSerializer):
    # üü¢ –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º—ã –∏ –¥–∞—Ç—ã
    test_theme = serializers.CharField(source='test_information.theme', read_only=True)
    teacher_username = serializers.CharField(source='test_information.teacher.username', read_only=True)
    test_date = serializers.DateTimeField(source='test_information.create_at', read_only=True)
    user = UserSerializer(read_only=True)  
    class Meta:
        model = TestHistory
        fields = [
            "id",
            "number_corrected",
            "ball",
            "user",
            "test_information",
            "give_information",
            "review_questions",
            "created_at",
            "test_theme",          # üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ
            "teacher_username",    # üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ
            "test_date",
        ]
        read_only_fields = ["user"]


    def get_test_information(self, obj):
        if obj.test_information:
            return {
                "id": obj.test_information.id,
                "theme": obj.test_information.theme,
                "teacher": obj.test_information.teacher.username,
                "number_question": obj.test_information.number_question,
                "create_at": obj.test_information.create_at, # üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ
            }
        return None